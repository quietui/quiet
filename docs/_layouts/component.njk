{% set hasSidebar = true %}
{% set hasOutline = true %}
{% set component = getComponent('quiet-' + page.fileSlug) %}
{% set description = component.summary %}

{% extends '../_includes/base.njk' %}

{# Component header #}
{% block beforeContent %}
  <h1 class="title">{{ title }}</h1>
  <div class="component-info">
    <code class="component-tag">&lt;{{ component.tagName }}&gt;</code>
    <quiet-badge>Since {{ component.since }}</quiet-badge>
    <quiet-badge
      {% if component.status == 'stable' %}variant="primary"{% endif %}
      {% if component.status == 'experimental' %}variant="destructive"{% endif %}
    >
      {{ component.status }}
    </quiet-badge>
  </div>
  <p class="component-summary">
    {{ component.summary }}
  </p>
{% endblock %}

{# Content #}
{% block content %}
  {{ content | safe }}
{% endblock %}

{# Component API #}
{% block afterContent %}
  <h2>API</h2>

  {# Slots #}
  {% if component.slots.length %}
    <h3>Slots</h3>
    <p>
      This component supports the following slots.
      <a href="/docs/using-web-components/#slots">Learn more about using slots</a>
    </p>
    <div class="table-scroll">
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
          </tr>
        </thead>
        <tbody>
          {% for slot in component.slots %}
            <tr>
              <td class="table-name">
                {% if slot.name %}
                  <code>{{ slot.name }}</code>
                {% else %}
                  (default)
                {% endif %}
              </td>
              <td class="table-description">{{ slot.description | inlineMarkdown | safe }}</td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  {% endif %}

  {# Properties #}
  {% if component.properties.length %}
    <h3>Properties</h3>
    <p>
      This component has the following properties that can be set with corresponding attributes. In many cases, the
      attribute's name is the same as the property's name. If an attribute is different, it will be displayed after the
      property.
      <a href="/docs/using-web-components/#attributes-and-properties">Learn more about attributes and properties</a>
    </p>
    <div class="table-scroll">
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Property / Attribute</th>
            <th class="table-description">Description</th>
            <th class="table-reflects">Reflects</th>
            <th class="table-type">Type</th>
            <th class="table-default">Default</th>
          </tr>
        </thead>
        <tbody>
          {% for prop in component.properties %}
            <tr>
              <td class="table-name">
                <code>{{ prop.name }}</code>

                {# Only show the attribute when it's different from the property #}
                {% if prop.attribute and prop.attribute != prop.name %}
                  <br><code>{{ prop.attribute }}</code>
                {% endif %}
              </td>
              <td class="table-description">
                {{ prop.description | inlineMarkdown | safe }}
              </td>
              <td class="table-reflects">
                {% if prop.reflects %}
                  <quiet-icon name="check"></quiet-icon>
                {% else %}
                  <quiet-icon name="x-mark"></quiet-icon>
                {% endif %}
              </td>
              <td class="table-type">
                {% if prop.type.text %}
                  <code>{{ prop.type.text | splitPipes | inlineMarkdown | safe }}</code>
                {% endif %}
              </td>
              <td class="table-default">
                {% if prop.default %}
                  <code>{{ prop.default | inlineMarkdown | safe }}</code>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  {% endif %}

  {# Methods #}
  {% if component.methods.length %}
    <h3>Methods</h3>
    <p>
      This component supports the following methods. You can obtain a reference to the element and call them like
      functions in JavaScript. <a href="/docs/using-web-components/#methods">Learn more about methods</a>
    </p>
    <div class="table-scroll">
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
            <th class="table-arguments">Arguments</th>
          </tr>
        </thead>
        <tbody>
          {% for method in component.methods %}
            <tr>
              <td class="table-name"><code>{{ method.name }}()</code></td>
              <td class="table-description">{{ method.description | inlineMarkdown | safe }}</td>
              <td class="table-arguments">
                {% if method.parameters.length %}
                  <code>
                    {% for param in method.parameters %}
                      {{ param.name }}: {{ param.type.text | splitPipes }}{% if not loop.last %},{% endif %}
                    {% endfor %}
                  </code>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  {% endif %}

  {# Events #}
  {% if component.events.length %}
    <h3>Events</h3>
    <p>
      This component dispathces the following custom events. You can listen to them the same way was native events.
      <a href="/docs/using-web-components/#events">Learn more about custom events</a>
    </p>
    <div class="table-scroll">
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
          </tr>
        </thead>
        <tbody>
          {% for event in component.events %}
            {% if event.name %}
              <tr>
                <td class="table-name"><code>{{ event.name }}</code></td>
                <td class="table-description">{{ event.description | inlineMarkdown | safe }}</td>
              </tr>
            {% endif %}
          {% endfor %}
        </tbody>
      </table>
    </div>
  {% endif %}

  {# Custom States #}
  {% if component.cssStates.length %}
    <h3>Custom States</h3>
    <p>
      This component has the following custom states. You can target them with CSS using the selectors shown below.
      <a href="/docs/using-web-components/#custom-states">Learn more about custom states</a>
    </p>
    <div class="table-scroll">
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
            <th class="table-selector">CSS selector</th>
          </tr>
        </thead>
        <tbody>
          {% for state in component.cssStates %}
            <tr>
              <td class="table-name"><code>{{ state.name }}</code></td>
              <td class="table-description">{{ state.description | inlineMarkdown | safe }}</td>
              <td class="table-selector"><code>[data-state-{{ state.name }}]</code></td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  {% endif %}

  {# Custom Properties #}
  {% if component.cssProperties.length %}
    <h3>CSS custom properties</h3>
    <p>
      This component supports the following CSS custom properties. You can style them like any other CSS property.
      <a href="/docs/using-web-components/#css-custom-properties">Learn more about CSS custom properties</a>
    </p>
    <div class="table-scroll">
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
            <th>Default</th>
          </tr>
        </thead>
        <tbody>
          {% for cssProperty in component.cssProperties %}
            <tr>
              <td class="table-name"><code>{{ cssProperty.name }}</code></td>
              <td class="table-description">{{ cssProperty.description | inlineMarkdown | safe }}</td>
              <td class="table-default">
                {% if cssProperty.default %}
                  <code>{{ cssProperty.default }}</code>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  {% endif %}

  {# CSS Parts #}
  {% if component.cssParts.length %}
    <h3>CSS parts</h3>
    <p>
      This component exposes internal elements that can be styled with CSS using the selectors shown below.
      <a href="/docs/using-web-components/#css-parts">Learn more about CSS parts</a>
    </p>
    <div class="table-scroll">
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
            <th class="table-selector">CSS selector</th>
          </tr>
        </thead>
        <tbody>
          {% for cssPart in component.cssParts %}
            <tr>
              <td class="table-name"><code>{{ cssPart.name }}</code></td>
              <td class="table-description">{{ cssPart.description | inlineMarkdown | safe }}</td>
              <td class="table-selector"><code>::part({{ cssPart.name }})</code></td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  {% endif %}

  {# Dependencies #}
  {% if component.dependencies.length %}
    <h3>Dependencies</h3>
    <p>
      This component automatically imports the following elements. If any subdependencies exist, they will also be included in this list.
    </p>
    <ul class="dependency-list">
      {% for dependency in component.dependencies %}
        <li><a href="/docs/components/{{ dependency | stripQuietPrefix }}"><code>&lt;{{ dependency }}&gt;</code></a></li>
      {% endfor %}
    </ul>
  {% endif %}

  {# Importing #}
  <h3>Importing</h3>
  <p>
    The <a href="/docs/#autoloading">autoloader</a> is the recommended way to import components. If you prefer to do it manually, use one of the following code snippets.
  </p>
  <quiet-tab-list label="How would you like to import this component?">
    <quiet-tab slot="tab" panel="cdn">CDN</quiet-tab>
    <quiet-tab slot="tab" panel="npm">npm</quiet-tab>
    <quiet-tab-panel name="cdn">
      <p>
        To manually import this component from the CDN, use the following code.
      </p>
      <pre><code class="language-js">import '{% cdnUrl component.path %}';</code></pre>
    </quiet-tab-panel>
    <quiet-tab-panel name="npm">
      <p>
        To manually import this component from npm, use the following code.
      </p>
      <pre><code class="language-js">import '@quietui/quiet/{{ component.path }}';</code></pre>
    </quiet-tab-panel>
  </quiet-tab-list>
{% endblock %}
