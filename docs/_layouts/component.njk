{% set hasSidebar = true %}
{% set hasOutline = true %}
{% set section = 'docs' %}
{% set component = getComponent('quiet-' + page.fileSlug) %}
{% set description = component.summary %}

{% extends '../_includes/base.njk' %}

{# Component header #}
{% block beforeContent %}
  <h1 class="title">{{ title }}</h1>
  <div class="component-info">
    <code class="component-tag">&lt;{{ component.tagName }}&gt;</code>
    {% if component.status == 'experimental' %}[experimental]{% endif %}
    {% if component.status == 'stable' %}[stable]{% endif %}
    <quiet-badge>since {{ component.since }}</quiet-badge>
    {% if component.superclass.name == 'QuietFormControlElement' %}[form]{% endif %}
  </div>
  <p class="component-summary">
    {{ component.summary }}
  </p>
{% endblock %}

{# Content #}
{% block content %}
  {{ content | safe }}
{% endblock %}

{% block afterContent %}
  {# Licensing & info #}
  <quiet-mesh-gradient class="mesh-container">
    <ul class="features-grid" aria-label="Features" style="margin-block-end: 0;">
      <li>
        <a class="stretch" href="https://buy.polar.sh/polar_cl_mpasqxfW1U2foivCOYuS9Lux4uUk459jIywEA27Z3gm" data-no-external>
          <img class="quiet-if-light" src="/assets/images/symbol-light.svg" alt="Quiet logo">
          <img class="quiet-if-dark" src="/assets/images/symbol-dark.svg" alt="Quiet logo">
          <br>
          Become an Insider<br>
          <small>Get support, Discord access, and more!</small>
        </a>
      </li>
      <li>
        <a class="stretch" href="/figma">
          <img src="/assets/images/figma-logo.svg" alt="Figma logo"><br>
          Download the Figma file<br>
          <small>Ready to use and customize</small>
        </a>
      </li>
      <li>
        <a class="stretch" href="https://buy.polar.sh/polar_cl_mpasqxfW1U2foivCOYuS9Lux4uUk459jIywEA27Z3gm" data-no-external>
          <img src="/assets/images/discord-logo.svg" alt="Discord logo"><br>
          Join the private Discord<br>
          <small>Get help from the maintainer on Discord</small>
        </a>
      </li>
      <li>
        <a class="stretch" href="https://github.com/quietui/quiet/stargazers" target="_blank" data-no-external>
          <img class="quiet-if-light" src="/assets/images/github-logo-light.svg" alt="GitHub logo">
          <img class="quiet-if-dark" src="/assets/images/github-logo-dark.svg" alt="GitHub logo">
          <br>
          Star on GitHub<br>
          <small>Free and makes the cats happy</small>
        </a>
      </li>
    </ul>
  </quiet-mesh-gradient>

  {# Component API #}
  <h2>API</h2>

  {# Importing #}
  <h3>Importing</h3>
  <p>
    The <a href="/docs/#autoloading">autoloader</a> is the recommended way to import components but, if you prefer to do
    it manually, the following code snippets will be helpful.
  </p>
  <quiet-tab-list class="import-tabs" label="How would you like to import this component?">
    <quiet-tab panel="cdn">CDN</quiet-tab>
    <quiet-tab panel="npm">npm</quiet-tab>
    <quiet-tab-panel name="cdn">
      <p>
        To manually import <code>&lt;{{ component.tagName }}&gt;</code> from the CDN, use the following code.
      </p>
      <pre><code class="language-js">import '{% cdnUrl component.path %}';</code></pre>
    </quiet-tab-panel>
    <quiet-tab-panel name="npm">
      <p>
        To manually import <code>&lt;{{ component.tagName }}&gt;</code> from npm, use the following code.
      </p>
      <pre><code class="language-js">import '@quietui/quiet/{{ component.path | stripDistPrefix }}';</code></pre>
    </quiet-tab-panel>
  </quiet-tab-list>

  {# Slots #}
  {% if component.slots.length %}
    <h3>Slots</h3>
    <p>
      {{ title }} supports the following slots.
      <a href="/docs/using-components/#slots">Learn more about using slots</a>
    </p>
    <quiet-scroller>
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
          </tr>
        </thead>
        <tbody>
          {% for slot in component.slots %}
            <tr>
              <td class="table-name">
                {% if slot.name %}
                  <code>{{ slot.name }}</code>
                {% else %}
                  (default)
                {% endif %}
              </td>
              <td class="table-description">{{ slot.description | inlineMarkdown | safe }}</td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </quiet-scroller>
  {% endif %}

  {# Properties #}
  {% if component.properties.length %}
    <h3>Properties</h3>
    <p>
      {{ title }} has the following properties that can be set with corresponding attributes. In many cases, the
      attribute's name is the same as the property's name. If an attribute is different, it will be displayed after the
      property.
      <a href="/docs/using-components/#attributes-and-properties">Learn more about attributes and properties</a>
    </p>
    <quiet-scroller>
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Property / Attribute</th>
            <th class="table-description">Description</th>
            <th class="table-reflects">Reflects</th>
            <th class="table-type">Type</th>
            <th class="table-default">Default</th>
          </tr>
        </thead>
        <tbody>
          {% for prop in component.properties %}
            <tr>
              <td class="table-name">
                <code>{{ prop.name }}</code>

                {# Only show the attribute when it's different from the property #}
                {% if prop.attribute and prop.attribute != prop.name %}
                  <br><code>{{ prop.attribute }}</code>
                {% endif %}
              </td>
              <td class="table-description">
                {{ prop.description | inlineMarkdown | safe }}
              </td>
              <td class="table-reflects">
                {% if prop.reflects %}
                  <quiet-icon name="check"></quiet-icon>
                {% else %}
                  <quiet-icon name="x"></quiet-icon>
                {% endif %}
              </td>
              <td class="table-type">
                {% if prop.type.text %}
                  <code>{{ prop.type.text | splitPipes | inlineMarkdown | safe }}</code>
                {% endif %}
              </td>
              <td class="table-default">
                {% if prop.default %}
                  <code>{{ prop.default | inlineMarkdown | safe }}</code>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </quiet-scroller>
  {% endif %}

  {# Methods #}
  {% if component.methods.length %}
    <h3>Methods</h3>
    <p>
      {{ title }} supports the following methods. You can obtain a reference to the element and call them like
      functions in JavaScript. <a href="/docs/using-components/#methods">Learn more about methods</a>
    </p>
    <quiet-scroller>
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
            <th class="table-arguments">Arguments</th>
          </tr>
        </thead>
        <tbody>
          {% for method in component.methods %}
            <tr>
              <td class="table-name"><code>{{ method.name }}()</code></td>
              <td class="table-description">{{ method.description | inlineMarkdown | safe }}</td>
              <td class="table-arguments">
                {% if method.parameters.length %}
                  <code>
                    {% for param in method.parameters %}
                      {{ param.name }}: {{ param.type.text | splitPipes }}{% if not loop.last %},{% endif %}
                    {% endfor %}
                  </code>
                {% endif %}
              </td>
            </tr>
          {% endfor %}

          {# Show shared form control methods that come from QuietFormControlElement #}
          {% if component.superclass.name == 'QuietFormControlElement' %}
            <tr>
              <td class="table-name"><code>checkValidity()</code></td>
              <td class="table-description">
                {{ '
                  Checks if the form control has any restraints and whether it satisfies them. If invalid, `false`
                  will be returned and the `invalid` event will be dispatched. If valid, `true` will be returned.
                ' | inlineMarkdown | safe }}
              </td>
              <td class="table-arguments"></td>
            </tr>
            <tr>
              <td class="table-name"><code>reportValidity()</code></td>
              <td class="table-description">
                {{ '
                  Checks if the form control has any restraints and whether it satisfies them. If invalid, `false` will
                  be returned and the `invalid` event will be dispatched. In addition, the problem will be reported to
                  the user. If valid, `true` will be returned.
                ' | inlineMarkdown | safe }}
              </td>
              <td class="table-arguments"></td>
            </tr>
            <tr>
            <td class="table-name"><code>setCustomValidity()</code></td>
              <td class="table-description">
                {{ '
                  Sets a custom validation message for the form control. If this message is not an empty string, then
                  the form control is considered invalid and the specified message will be displayed to the user when
                  reporting validity. Setting an empty string clears the custom validity state.
                ' | inlineMarkdown | safe }}
              </td>
              <td class="table-arguments"><code>message: string</code></td>
            </tr>
          {% endif %}
        </tbody>
      </table>
    </quiet-scroller>
  {% endif %}

  {# Events #}
  {% if component.events.length %}
    <h3>Events</h3>
    <p>
      {{ title }} dispatches the following custom events. You can listen to them the same way was native events.
      <a href="/docs/using-components/#events">Learn more about custom events</a>
    </p>
    <quiet-scroller>
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
          </tr>
        </thead>
        <tbody>
          {% for event in component.events %}
            <tr>
              <td class="table-name"><code>{{ event.name }}</code></td>
              <td class="table-description">{{ event.description | inlineMarkdown | safe }}</td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </quiet-scroller>
  {% endif %}

  {# Custom Properties #}
  {% if component.cssProperties.length %}
    <h3>CSS custom properties</h3>
    <p>
      {{ title }} supports the following CSS custom properties. You can style them like any other CSS property.
      <a href="/docs/using-components/#css-custom-properties">Learn more about CSS custom properties</a>
    </p>
    <quiet-scroller>
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
            <th>Default</th>
          </tr>
        </thead>
        <tbody>
          {% for cssProperty in component.cssProperties %}
            <tr>
              <td class="table-name"><code>{{ cssProperty.name }}</code></td>
              <td class="table-description">{{ cssProperty.description | inlineMarkdown | safe }}</td>
              <td class="table-default">
                {% if cssProperty.default %}
                  <code>{{ cssProperty.default }}</code>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </quiet-scroller>
  {% endif %}

  {# CSS Parts #}
  {% if component.cssParts.length %}
    <h3>CSS parts</h3>
    <p>
      {{ title }} exposes internal elements that can be styled with CSS using the selectors shown below.
      <a href="/docs/using-components/#css-parts">Learn more about CSS parts</a>
    </p>
    <quiet-scroller>
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
            <th class="table-selector">CSS selector</th>
          </tr>
        </thead>
        <tbody>
          {% for cssPart in component.cssParts %}
            <tr>
              <td class="table-name"><code>{{ cssPart.name }}</code></td>
              <td class="table-description">{{ cssPart.description | inlineMarkdown | safe }}</td>
              <td class="table-selector">
                <quiet-copy data="{{component.tagName}}::part({{ cssPart.name }})">
                  <quiet-button size="sm" class="unstyled">
                    <code>::part({{ cssPart.name }})</code>
                    <quiet-icon name="copy"></quiet-icon>
                  </quiet-button>
                </quiet-copy>
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </quiet-scroller>
  {% endif %}

  {# Custom States #}
  {% if component.cssStates.length %}
    <h3>Custom States</h3>
    <p>
      {{ title }} has the following custom states. You can target them with CSS using the selectors shown below.
      <a href="/docs/using-components/#custom-states">Learn more about custom states</a>
    </p>
    <quiet-scroller>
      <table class="component-table">
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
            <th class="table-selector">CSS selector</th>
          </tr>
        </thead>
        <tbody>
          {% for state in component.cssStates %}
            <tr>
              <td class="table-name"><code>{{ state.name }}</code></td>
              <td class="table-description">{{ state.description | inlineMarkdown | safe }}</td>
              <td class="table-selector">
                <quiet-copy data="{{component.tagName}}:state({{ state.name }})">
                  <quiet-button size="sm" class="unstyled">
                    <code>:state({{ state.name }})</code>
                    <quiet-icon name="copy"></quiet-icon>
                  </quiet-button>
                </quiet-copy>
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </quiet-scroller>
  {% endif %}

  {# Dependencies #}
  {% if component.dependencies.length %}
    <h3>Dependencies</h3>
    <p>
      {{ title }} automatically imports the following elements. Sub-dependencies are also included in this list.
    </p>
    <ul class="dependency-list">
      {% for dependency in component.dependencies %}
        <li><a href="/docs/components/{{ dependency | stripQuietPrefix }}"><code>&lt;{{ dependency }}&gt;</code></a></li>
      {% endfor %}
    </ul>
  {% endif %}
{% endblock %}
